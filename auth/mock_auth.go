// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificate is a mock of Certificate interface.
type MockCertificate struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateMockRecorder
}

// MockCertificateMockRecorder is the mock recorder for MockCertificate.
type MockCertificateMockRecorder struct {
	mock *MockCertificate
}

// NewMockCertificate creates a new mock instance.
func NewMockCertificate(ctrl *gomock.Controller) *MockCertificate {
	mock := &MockCertificate{ctrl: ctrl}
	mock.recorder = &MockCertificateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificate) EXPECT() *MockCertificateMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockCertificate) Auth(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockCertificateMockRecorder) Auth(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockCertificate)(nil).Auth), username, password)
}
